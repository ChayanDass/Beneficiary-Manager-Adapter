definitions:
  models.AcademicQualification:
    enum:
    - None
    - Class-X
    - Class-XII
    - Diploma
    - Graduate
    - Post-Graduate
    type: string
    x-enum-varnames:
    - AcademicQualificationNone
    - AcademicQualificationClassX
    - AcademicQualificationClassXII
    - AcademicQualificationDiploma
    - AcademicQualificationGraduate
    - AcademicQualificationPostGraduate
  models.Category:
    enum:
    - General
    - SC
    - ST
    - OBC
    - Other
    type: string
    x-enum-varnames:
    - CategoryGeneral
    - CategorySC
    - CategoryST
    - CategoryOBC
    - CategoryOther
  models.Eligibility:
    properties:
      academic_qualification:
        $ref: '#/definitions/models.AcademicQualification'
      age_max:
        type: integer
      age_min:
        type: integer
      category:
        $ref: '#/definitions/models.Category'
      created_at:
        type: string
      documents_required:
        items:
          type: integer
        type: array
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: integer
      income_limit:
        type: number
      updated_at:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
  models.Gender:
    enum:
    - Male
    - Female
    - Other
    type: string
    x-enum-varnames:
    - GenderMale
    - GenderFemale
    - GenderOther
  models.Scheme:
    properties:
      amount:
        type: number
      application_link:
        type: string
      created_at:
        type: string
      description:
        type: string
      eligibility:
        $ref: '#/definitions/models.Eligibility'
      eligibility_id:
        description: foreign key to Eligibility
        type: integer
      end_date:
        type: string
      id:
        type: integer
      name:
        type: string
      start_date:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/schemes/status/{id}:
    get:
      consumes:
      - application/json
      description: Get the current status of a scheme by its ID
      parameters:
      - description: Scheme ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Scheme'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Scheme Status
      tags:
      - scheme
swagger: "2.0"
